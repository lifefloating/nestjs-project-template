openapi: 3.1.0
paths:
  /api/v1/better-auth/token:
    get:
      operationId: AuthController_getOrVerifyToken_v1
      parameters:
        - name: token
          required: true
          in: query
          schema:
            type: string
        - name: id
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: &ref_0
        - Auth
    post:
      operationId: AuthController_generateToken_v1
      parameters: []
      responses:
        '201':
          description: ''
      tags: *ref_0
    delete:
      operationId: AuthController_deleteToken_v1
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_0
  /api/v1/better-auth/session:
    get:
      operationId: AuthController_getSession_v1
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_0
  /api/v1/better-auth/providers:
    get:
      operationId: AuthController_getProviders_v1
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_0
  /api/v1/users:
    post:
      operationId: UsersController_create_v1
      parameters: []
      responses:
        '201':
          description: User successfully created
        '400':
          description: Bad Request
        '409':
          description: User already exists
      summary: Create a new user
      tags: &ref_1
        - users
    get:
      operationId: UsersController_findAll_v1
      parameters: []
      responses:
        '200':
          description: Return all users
      summary: Get all users
      tags: *ref_1
  /api/v1/users/{id}:
    get:
      operationId: UsersController_findOne_v1
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: Return the user
        '404':
          description: User not found
      summary: Get a user by ID
      tags: *ref_1
  /api/v1/storage/upload:
    post:
      operationId: StorageController_uploadFile_v1
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
      responses:
        '201':
          description: ''
      summary: Upload a single file
      tags: &ref_2
        - storage
  /api/v1/storage/{key}:
    delete:
      operationId: StorageController_deleteFile_v1
      parameters:
        - name: key
          required: true
          in: path
          description: Unique identifier of the file
          schema:
            type: string
      responses:
        '200':
          description: ''
      summary: Delete a file
      tags: *ref_2
  /api/v1/storage/{key}/url:
    get:
      operationId: StorageController_getFileUrl_v1
      parameters:
        - name: key
          required: true
          in: path
          description: Unique identifier of the file
          schema:
            type: string
        - name: expiresIn
          required: false
          in: query
          description: Expiration time for URL (seconds)
          schema:
            type: number
      responses:
        '200':
          description: ''
      summary: Get a signed URL for a file
      tags: *ref_2
  /api/v1/stripe/test:
    get:
      operationId: StripeController_test_v1
      parameters: []
      responses:
        '200':
          description: Stripe integration is working
      summary: Test Stripe integration
      tags: &ref_3
        - stripe
  /api/v1/stripe/payment-intents:
    post:
      operationId: StripeController_createPaymentIntent_v1
      parameters: []
      responses:
        '201':
          description: Payment intent created successfully
        '400':
          description: Bad request
      summary: Create a payment intent
      tags: *ref_3
  /api/v1/stripe/payment-intents/{id}:
    get:
      operationId: StripeController_retrievePaymentIntent_v1
      parameters:
        - name: id
          required: true
          in: path
          description: Payment intent ID
          schema:
            type: string
      responses:
        '200':
          description: Payment intent retrieved successfully
        '404':
          description: Payment intent not found
      summary: Retrieve a payment intent
      tags: *ref_3
  /api/v1/stripe/customers:
    post:
      operationId: StripeController_createCustomer_v1
      parameters: []
      responses:
        '201':
          description: Customer created successfully
        '400':
          description: Bad request
      summary: Create a customer
      tags: *ref_3
  /api/v1/stripe/setup-intents:
    post:
      operationId: StripeController_createSetupIntent_v1
      parameters: []
      responses:
        '201':
          description: Setup intent created successfully
        '400':
          description: Bad request
      summary: Create a setup intent for a customer
      tags: *ref_3
  /api/v1/stripe/webhooks:
    post:
      operationId: StripeController_handleWebhook_v1
      parameters:
        - name: stripe-signature
          required: true
          in: header
          description: Stripe webhook signature
          schema:
            type: string
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook signature
      summary: Handle Stripe webhook events
      tags: *ref_3
info:
  title: NestJS Project Template API
  description: NestJS Project Template API documentation
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas: {}
